Go 1.11, Go 2.0, GopherCon, community overview
25 Sep 2018
Go1.11, Go2.0

Ivan Kutuzov
https://golang.org.ua
#GolangUA
@arbrix

* Agenda

- Go 1.11
- Conferences
- Go 2 draft designs
- Community

* Go 1.11

* Go 1.11

- WebAssembly and Modules have already been covered.

- Now onto the changes that won't make headlines!

Sources:

.link https://tip.golang.org/doc/go1.11
.link https://dev.golang.org/release#Go1.11
.link https://github.com/golang/go/issues?q=is:open+is:issue+milestone:Go1.11
.link https://talks.godoc.org/github.com/mvdan/talks/2018/go1.11.slide

* Ports

Dropped:

- Windows XP and Vista (300+ lines removed)

- OSX 10.9 and earlier (120+ lines removed)

- OpenBSD 6.1 and earlier

Minor additions, like `-race` on `linux/ppc64le` and `-msan` on `linux/arm64`.

`riscv` and `riscv64` reserved as `GOARCH` values reserved for the future.

* Tooling (besides modules)

- Last release to support *GOCACHE=off*

- *go*test* now runs *go*vet* by default

- *go*vet* now requires its input packages to typecheck

- Last release where *godoc* has a command-line interface

* Tooling #2 - x/tools/go/packages

A replacement for `x/tools/go/loader` with several advantages:

- Support for Modules - critical for third party tools

- Support for patterns, like `./...`

- Calls out to *go*list* to find packages

- Support for build systems like Bazel

- Support loading dependencies via `GOCACHE`

* Tooling #3 - gofmt

	var _ = T{
		F1: 1,
		F2: 1,
		VeryLongNameJustBecause: 1,
		F3: 1,
	}

The tweaked heuristic now gives us:

	var _ = T{
		F1:                      1,
		F2:                      1,
		VeryLongNameJustBecause: 1,
		F3:                      1,
	}

* Tooling #4 - godoc versions for std

.image ./0925-go1.11-conf-community/go1.11_godoc_versions.png _ 900

* Tooling #5 - debugging

- Experimental support for calling Go functions in a debugger

Optimized binaries now include more accurate info, like:

- Variable locations

- Line numbers

- Breakpoint locations

DWARF sections (debugging info) are now compressed by default

* Runtime

- Now uses a sparse heap, so the 512GiB limit is gone

- Kernel calls on macOS and iOS now go through `libSystem.so`

- This improves Go's compatibility with future macOS and iOS versions

* Compiler #1 - indexed export format

- The old format was sequential - entire packages had to be loaded

- The new format is indexed, so the compiler only loads what it needs

- Especially important for large projects and packages

--

	Juju/c=4/l=4        46.3s ± 4%        38.0s ± 4%  -18.06%  (p=0.001 n=7+7)
	Kubelet/c=4/l=4     48.1s ± 2%        39.0s ± 5%  -18.93%  (p=0.002 n=6+6)

* Compiler #2 - unused type switch variables

- `gccgo` and `go/types` already errored here

- The compiler now does too, for consistency

	func f(v interface{}) {
		switch x := v.(type) {
		}
	}

* Compiler #3 - inlining function calls

- Funcs that call `panic` can now be inlined

`-l=4` makes the inlining more agressive, also enabling mid-stack inlining

- `-l=4` has been tweaked and improved

- However, `-l=4` still makes some programs larger and slower

- The heuristic needs more work for mid-stack inlining to be the default

* Compiler #4 - map clearing idiom

	for k := range m {
		delete(m, k)
	}

- Reuses the allocated memory for the map

- Now skips the expensive range when possible

	GoMapClear/Reflexive/1         92.2ns ± 1%  47.1ns ± 2%  -48.89%  (p=0.000 n=9+9)
	GoMapClear/Reflexive/10         108ns ± 1%    48ns ± 2%  -55.68%  (p=0.000 n=10+10)
	GoMapClear/Reflexive/100        303ns ± 2%   110ns ± 3%  -63.56%  (p=0.000 n=10+10)
	GoMapClear/Reflexive/1000      3.58µs ± 3%  1.23µs ± 2%  -65.49%  (p=0.000 n=9+10)
	GoMapClear/Reflexive/10000     28.2µs ± 3%  10.3µs ± 2%  -63.55%  (p=0.000 n=9+10)

* Compiler #5 - slice extension

	append(s, make([]T, n)...)

- Simpler than manually allocating a new slice and copying

- Avoids an allocation if there's enough capacity

- If a new backing array is needed, avoids clearing memory twice

	ExtendSlice/IntSlice         103ns ± 4%      57ns ± 4%   -44.55%  (p=0.000 n=18+18)
	ExtendSlice/PointerSlice     155ns ± 3%      77ns ± 3%   -49.93%  (p=0.000 n=20+20)
	ExtendSlice/NoGrow          50.2ns ± 3%     5.2ns ± 2%   -89.67%  (p=0.000 n=18+18)

* Compiler #6 - prove pass

The prove pass derives facts from code, to be used to delete unnecessary
branches and bounds checks.

Most importantly, it now recognizes transitive relations:

- Inside *if*n*<*10*{}*, it can prove *n*<*10*

- After *s*:=*make([]int,*20)*, it can prove *len(s)*==*20*

- Globally, *10*<*20*, so *n*<*len(s)*

- *s*:=*make([]int,*20);*if*n*<*10*{*_*=*s[n]*}* can never panic

The bounds check is what panics if the index is out of bounds, so in this case
it can be removed.

* Standard library highlights #1

Let's begin with some of the most visible changes:

- Added `os.UserCacheDir`; `$HOME/.cache` on most Unix systems

- `os/user` adds a `osusergo` build tag use pure Go without `CGO_ENABLED=0`

- `time` now accepts parsing numeric timezones like `+03`

- `net/http` adds support for CIDR and ports in `NO_PROXY`, like `NO_PROXY=10.0.0.0/8`

- `net/http/httputil.ReverseProxy` gained an `ErrorHandler`

- Some `crypto` funcs now randomly read an extra byte

* Standard library highlights #2

- `text/template` can now modify variables via the `=` token:

	{{ $v := "init" }}
	{{ if true }}
		{{ $v = "changed" }}
	{{ end }}
	v: {{ $v }} {{/* "changed" */}}<Paste>

- `io/ioutil.TempFile` can now be told where to put the random characters:

	ioutil.TempFile("", "foo-") // /tmp/foo-123456
	ioutil.TempFile("", "foo-*.txt") // /tmp/foo-123456.txt

* Standard library highlights #3

What about performance?

- Some packages were optimized for `arm64`; especially crypto and byte handling

- Pieces of `math/big` were rewritten to be much faster

- Copying data between TCP connections is faster on Linux via the `splice` syscall

- The mutex profile now includes reader/writer contention for `sync.RWMutex`

* Go modules

* Why do we need package management in Go?

* t0: we start to write program P

.image 0925-go1.11-conf-community/t0.png

* t1: we add a dependency on D

.image 0925-go1.11-conf-community/t1.png

* t2: we add a dependency on C

.image 0925-go1.11-conf-community/t2.png

* t3: we update C (and its dependencies)

.image 0925-go1.11-conf-community/t3.png

* History

- Various tools/approaches to help specify version requirements
- GOPATH, goven, godeps, godep, gopkg.in, glide, gb, govendor, vendor dir, dep
- All approaches vary somewhat
- Cannot create other version-aware tools

* Go 1.11 introduces Go modules

- A module is a collection of related Go packages
- Modules are the unit of source code interchange and versioning
- The go command has direct support for working with modules
- Modules replace the old GOPATH-based approach to specifying which source files are used in a given build

  go help modules

* The principles of versioning in Go

*Compatibility*

Import compatibility rule - if an old package and a new package have the same import path, the new package must be backwards-compatible with the old package

*Repeatability*

The result of a build of a given version of a package should not change over time

*Cooperation*

We must all work together to maintain the Go package ecosystem. Tools cannot work around a lack of cooperation.

* Semantic Import Versioning

.image 0925-go1.11-conf-community/semver.png 400 _

.caption See https://semver.org/ and https://research.swtch.com/vgo-import

* Much more

- Publishing modules
- Proxy support for published modules ([[https://github.com/gomods/athens]])
- Tooling built atop go modules ([[https://github.com/rogpeppe/gohack]])
- Full support for custom import paths
- Go submodules natively supported (mono repos)

* More subcommands

  Usage:

        go mod <command> [arguments]

  The commands are:

        download    download modules to local cache
        edit        edit go.mod from tools or scripts
        fix         make go.mod semantically consistent
        graph       print module requirement graph
        init        initialize new module in current directory
        tidy        add missing and remove unused modules
        vendor      make vendored copy of dependencies
        verify      verify dependencies have expected content
        why         explain why packages or modules are needed

* Links

- `cmd/go` documentation ([[https://tip.golang.org/cmd/go]])
- Modules wiki ([[https://github.com/golang/go/wiki/Modules]])
- Russ Cox's GopherCon Singapore Keynote ([[https://www.youtube.com/watch?v=F8nrpe0XWRg]])
- Russ Cox's original `vgo` series ([[https://research.swtch.com/vgo]])
- Paul Jolly talk: [[https://talks.godoc.org/github.com/myitcv/talks/2018-08-15-glug-modules/main.slide][What are Go modules and how do I use them?]]

* Conferences

* List

- GopherCon
- GoWayFest (Minsk)
- GDG DevFest (Lviv)
- GoLab (Florence)
- GoGoConf (Krakow)
- GoDays (Berlin)
- dotGo (Paris) [promo: GOLANGUA]
- GothamGo (New York)

.link https://github.com/golang/go/wiki/Conferences

* GopherCon 2018

- [[https://www.youtube.com/playlist?list=PL2ntRZ1ySWBdatAqf-2_125H4sGzaWngM][Talks Playlist]]
- [[https://www.youtube.com/playlist?list=PL2ntRZ1ySWBdMEZScpaoRX-vyt6pRUvfM][Lightning Talks Playlist]]

.link https://about.sourcegraph.com/go/gophercon-2018-go-says-wat/
.link https://about.sourcegraph.com/go/gophercon-2018-how-do-you-structure-your-go-apps/
.link https://about.sourcegraph.com/go/gophercon-2018-5-mistakes-c-c-devs-make-writing-go/
.link https://about.sourcegraph.com/go/gophercon-2018-binary-search-tree-algorithms/

* Go 2 Draft Desinges

.link https://blog.golang.org/go2draft

- Error handling
- Error values
- Generics

.link https://go.googlesource.com/proposal/+/master/design/go2draft.md

* Error handling problem

  func CopyFile(src, dst string) throws error {
  	r := os.Open(src)
  	defer r.Close()

  	w := os.Create(dst)
  	io.Copy(w, r)
  	w.Close()
  }

.link https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling-overview.md

* Error handling prod-like

  func CopyFile(src, dst string) error {
  	r, err := os.Open(src)
  	if err != nil {
  		return fmt.Errorf("copy %s %s: %v", src, dst, err)
  	}
  	defer r.Close()

  	w, err := os.Create(dst)
  	if err != nil {
  		return fmt.Errorf("copy %s %s: %v", src, dst, err)
  	}

  	if _, err := io.Copy(w, r); err != nil {
  		w.Close()
  		os.Remove(dst)
  		return fmt.Errorf("copy %s %s: %v", src, dst, err)
  	}

  	if err := w.Close(); err != nil {
  		os.Remove(dst)
  		return fmt.Errorf("copy %s %s: %v", src, dst, err)
  	}
  }

* Error handling draft design

  func CopyFile(src, dst string) error {
  	handle err {
  		return fmt.Errorf("copy %s %s: %v", src, dst, err)
  	}

  	r := check os.Open(src)
  	defer r.Close()

  	w := check os.Create(dst)
  	handle err {
  		w.Close()
  		os.Remove(dst) // (only if a check fails)
  	}

  	check io.Copy(w, r)
  	check w.Close()
  	return nil
  }

* Error values solution list

.link github.com/spacemonkeygo/errors
.link github.com/juju/errgo
.link gopkg.in/errgo.v1
.link gopkg.in/errgo.v2
.link github.com/hashicorp/errwrap
.link github.com/pkg/errors
.link upspin.io/error

.link https://go.googlesource.com/proposal/+/master/design/go2draft-error-values-overview.md

* GopherCon Community

- Community Day Roundtables
- Go Team Community and Contribution Workshop
- GopherCars, GoBots & Other Flying Objects
- GopherSource: Open Source for Gophers
- Lightning Talks
