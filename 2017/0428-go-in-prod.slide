Strong and weak sides of Golang in production
28 Apr 2017
Tags: GolangUA, Go

Ivan Kutuzov
SE, SoftServe
https://golang.org.ua
@GolangUA
@arbrix

* Про себе

- Попередній досвід: 10+ років web/fullstack developer (PHP, JS)
- Досвід з Go: 2+ років
- активний діяч спільноти GolangUA (https://golang.org.ua)
- Twitter: @arbrix

.image ./0428-go-in-prod/ik-face.png 350 _

* Чому Go

Go був створений інженерами для інженерів. [[https://talks.golang.org/2014/taste.slide#2][Robert Griesemer 2014]]
.caption source: [[https://golang.org/doc/faq#What_is_the_purpose_of_the_project][What is the purpose of the project]]

- нові умови виконання програмного забезпечення
- зменьшити вартість підтримки програмного коду
- спростити розробку нових продуктів

.image ./0428-go-in-prod/gopher_big.png _ 400

* Хто вже використовує (з виступів 2015 року)

.image ./0428-go-in-prod/logo-1.png 250 _
.image ./0428-go-in-prod/logo-2.png 250 _

* Хто вже використовує (з виступів 2015 року)

.image ./0428-go-in-prod/logo-3.png 250 _
.image ./0428-go-in-prod/logo-4.png 250 _

* Хто вже використовує (з виступів 2015 року)

.image ./0428-go-in-prod/logo-5.png 250 _
.image ./0428-go-in-prod/logo-6.png 250 _

* Хто ще використовує

- [[https://github.com/golang/go/wiki/GoUsers][GoUsers]] ~600 компаній
- [[https://github.com/golang/go/wiki/SuccessStories][Success Stories]]

.image ./0428-go-in-prod/gophers5th.jpg _ 800

* Переваги Go

- Компільована мова програмування
- Строго-типізована
- Автоматичнe управління пам'яттю
- Проста
- Швидка
- Якісна та потужна стандартна бібліотека
- Широкий набір інструментів (go tools)

* Що означає проста? Порівняємо з Java...

	public static int IndexOfAny(String str, char[] chars) {
		if (isEmpty(str) || ArrayUtils.isEmpty(chars)) {
			return -1;
		}
		for (int i = 0; i < str.length(); i++) {
			char ch = str.charAt(i);
			for (int j = 0; j < chars.length; j++) {
				if (chars[j] == ch) {
					return i;
				}
			}
		}
		return -1;
	}

299 chars (100%), 101 tokens (100%)

* Реалізація на Go

	func IndexOfAny(str string, chars []rune) int {
		if len(str) == 0 || len(chars) == 0 {
			return -1
		}
		for i, ch := range str {
			for _, match := range chars {
				if ch == match {
					return i
				}
			}
		}
		return -1
	}

217 chars (73%), 62 tokens (61%)

Майже на 30% меньше тексту і близько 40% переваги по кількості знаків!

_Зменьшення_шуму_призводе_до_покращення_сприйняття._
.caption source: [[https://talks.golang.org/2014/taste.slide#2][Robert Griesemer 2014]]

* Приклад простого HTTP серверу

	package main
	
	import (
		"fmt"
		"log"
		"net/http"
	)
	
	func HelloServer(w http.ResponseWriter, req *http.Request) {
		log.Println(req.URL)
		fmt.Fprintf(w, "Hello, #Pivorak!\nURL = %s\n", req.URL)
	}
	
	func main() {
		fmt.Println("please connect to localhost:3000/hello")
		http.HandleFunc("/hello", HelloServer)
		log.Fatal(http.ListenAndServe(":3000", nil))
	}

* Звідки швидкість?

- компіляція в бінарний код
- підтримка concurrency (можливість одночасного виконання операцій)

	func First(query string, replicas ...Search) Result {
	    c := make(chan Result)
	    searchReplica := func(i int) { c <- replicas[i].Search(query) }
	    for i := range replicas {
	        go searchReplica(i)
	    }
	    return <-c
	}

Без блокувань, без перевірки умов, без зворотніх викликів.
[[https://talks.golang.org/2012/concurrency.slide][Go Concurrency Patterns 2012]]
[[https://talks.golang.org/2013/advconc.slide#1][Advanced Go Concurrency Patterns 2013]]

* Зручні інструменти

.html ./0428-go-in-prod/tool-list.html
.caption source: [[https://github.com/golang/go/wiki/CodeTools][Code Tools]]
.caption source: [[https://github.com/golang/go/wiki/GoGenerateTools][Generate Tools]]
.caption source: [[https://github.com/golang/go/wiki/PackageManagementTools][Package Management Tools]]

* Де застосовують Go

- Cloud/Networking сервери, роутери, проксі, пушилки та бекенди
- Distributed системи та storage/FS, внутрішня інфраструктура 
- Мікросервіси всіх видів (+фреймворки GoKit, Kite, etc) 
- Кластерні штуки для датацентрів (etcd, consul, packer, vault etc)
- Контейнери та оркестрація (Kubernetes, Racket, Docker, Tectronic, etc)

* Де ще можна

- Бази даних (CockroachDB, InfluxDB, Cayley, Tiedot, Aerospike, etc)
- REST-бекенди та SPA-бекенди (restful, gorilla, echo, etc)
- Навіть вебсайти (hugo, gin, echo, negroni, etc. +фреймворки Revel, Beego, etc.)
- Утиліти командного рядка (aws-sdk, mongotools, docker,
- Devops штуки, бекап, менеджмент систем і т.д.
.caption source: [[https://youtu.be/nbAX1yEdteo?list=PLb4zKafb8ilKQz0Rs8Jp-mlzVIzXBrQen][Ivan Daniluk Kyiv Go Meetup 2015 - Go in 2015]]

* Stdlib

~140 Пакетів

.image ./0428-go-in-prod/golang-stdlib-tag-cloud.png _ 900

* Різноманітність бібліотек

.link https://awesome-go.com
.link https://godoc.org
.link http://go-search.org/search go-search.org - 756881 packages

* То коли вже про production буде?

[[https://landing.google.com/sre/book.html][Site Reliability Engineering]]
.caption Edited by Betsy Beyer, Chris Jones, Jennifer Petoff and Niall Richard Murphy

Members of the SRE team explain how their engagement with the entire software lifecycle has enabled Google to build, deploy, monitor, and maintain some of the largest software systems in the world.

* Production-grade Go

Розробка Production-grage Go програм відрізняється від звичайної.
Велика різниця між вашим кодом і вашим кодом в production. Ви маєте знати усі шляхи які можуть призвести до падіння сервісу!

Production-grade code - коли ви знаєте про такі можливості і передбачаєте їх обробку, запобігаєте появі або готуєте план дій у таких випадках.
.caption source: [[https://www.oreilly.com/ideas/how-to-ship-production-grade-go][How to ship production-grade Go]]

* Поради

- Робіть значення помилок змістовним. Обгортайте значення новим контекстом.

* Поради

- Робіть значення помилок змістовним. Обгортайте значення новим контекстом.
- Налаштуйте сповіщення у випадках *panic*

* Поради

- Робіть значення помилок змістовним. Обгортайте значення новим контекстом.
- Налаштуйте сповіщення у випадках *panic*
- Використовуйте структуровані логи

	import log "github.com/Sirupsen/logrus"

	func main() {
	  log.SetFormatter(&log.JSONFormatter{})
	
	  log.WithFields(log.Fields{
	    "userId": 1,
	    "server": "www.google.com",
	  }).Info("Redirecting user")
	
	}


	{"level":"info","msg":"Redirecting user","server":"www.google.com",
	"time":"2017-03-25T17:00:00-08:00","userId":1}


* Поради

- Робіть значення помилок змістовним. Обгортайте значення новим контекстом.
- Налаштуйте сповіщення у випадках *panic*
- Використовуйте структуровані логи
- Додавайте та відслідковуйти Метрики сервису. Це надає більше інформації по поведінці та швидкодії вашої програми. На ринку існує багато компаній які надають послуги збирання, зберіганя, аналізу ваших метрик: Datadog, Prometheus, StatsD + Graphite та інші.

* Поради

- Робіть значення помилок змістовним. Обгортайте значення новим контекстом.
- Налаштуйте сповіщення у випадках *panic*
- Використовуйте структуровані логи
- Додавайте та відслідковуйти Метрики сервису. Це надає більше інформації по поведінці та швидкодії вашої програми. На ринку існує багато компаній які надають послуги збирання, зберіганя, аналізу ваших метрик: Datadog, Prometheus, StatsD + Graphite та інші.
- Тестуйте більше ніж вважаєте запотрібним

* Чи усе так радужно?

.image ./0428-go-in-prod/panda-rainbow.jpg _ 900

* Новеньки часто жаліються на:

- error handling / no exceptions
- no generics
- stuck in 70’s
- no OOP
- too opinionated
.caption source: [[https://divan.github.io/posts/go_complain_howto/][How to complain about Go]]
.caption more complains: [[https://github.com/ksimka/go-is-not-good][list of articles complaining that go (golang) isn't good enough]]

* Пастки

- Відмінність від поведінки інших мов (вигляд схожий, результат не передбачувальний)

  for i := range []byte(`Hello`) {
     pintln(i)
  }

.link https://divan.github.io/posts/avoid_gotchas/ How to avoid Go gotchas

* Пастки

.link https://divan.github.io/posts/avoid_gotchas/ How to avoid Go gotchas
.link http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/ 50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs

* Пастки

.link https://divan.github.io/posts/avoid_gotchas/ How to avoid Go gotchas
.link http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/ 50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs
.link https://go-traps.appspot.com/

* Що з приводу контейнеризації?

Статичний файл без жодних залежностей, кажете...

  package main
  import (
      "fmt"
      "io/ioutil"
      "net/http"
      "os"
  )
  func main() {
      resp, err := http.Get("https://google.com")
      check(err)
      body, err := ioutil.ReadAll(resp.Body)
      check(err)
      fmt.Println(len(body))
  }
  func check(err error) {
      if err != nil {
          fmt.Println(err)
          os.Exit(1)
      }
  }

* Dockerize

  FROM golang:latest 
  RUN mkdir /app 
  ADD . /app/ 
  WORKDIR /app 
  RUN go build -o main . 
  CMD ["/app/main"]

Але зачекайте, `golang:latest` 267 MB
.caption source: [[https://hub.docker.com/r/library/golang/tags/][docker hub]]

* Docker from sratch

  FROM scratch
  ADD main /
  CMD ["/main"]

Але спочатку ми маємо скомпілювати програму.

  GOOS=linux go build -o main .

* Перевіряємо

  $ docker run -it example-scratch
  no such file or directory

Чому? 

Go шукає бібліотекі які були доступні під час компіляції в операційній системі, але їх нема у *docker*from*sratch*

* Компілюємо з усіма залежностями, щоб наверняка

  CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

Перевіряємо і...

  $ docker run -it example-scratch
  Get https://google.com: x509: failed to load system roots and no roots provided

* Додаємо сертифікат, який зазвичай є в ОС

  FROM scratch
  ADD ca-certificates.crt /etc/ssl/certs/
  ADD main /
  CMD ["/main"]

Done!

.caption source1: [[https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/][lding Minimal Docker Containers for Go Applications]]
.caption source2: [[http://www.jeffsloyer.io/post/cross-compiling-docker-alpine-golang/][Cross Compiling Golang With A Docker Alpine Container]]

* Questions?

* Resources

[[https://www.oreilly.com/ideas/how-to-ship-production-grade-go][How to ship production-grade Go]]
[[https://npf.io/2017/03/3.5yrs-500k-lines-of-go/][3.5 Years, 500k Lines of Go (Part 1)]]
[[https://peter.bourgon.org/go-in-production/][Go: Best Practices for Production Environments]]
[[https://www.iron.io/go-after-2-years-in-production/][Go After 2 Years in Production (2013)]]
[[https://gotocon.com/dl/goto-chicago-2016/slides/TravisReeder_GOInProduction.pdf][Go in production 2016]]


[[https://golang.org/doc/code.html][How to Write Go Code]]
[[https://golang.org/doc/effective_go.html][Effective Go]]
[[https://github.com/golang/go/wiki/CodeReviewComments][Go Code Review Comments]]

* Спільнота

- Maillists - [[https://groups.google.com/forum/#!forum/golang-dev][golang-dev]] та [[https://groups.google.com/forum/#!forum/golang-nuts][golang-nuts]] (high-traffic!)
- Reddit - [[https://www.reddit.com/r/golang][https://www.reddit.com/r/golang]]
- Twitter - [[https://twitter.com/golang_news][https://twitter.com/golang_news]]
- Тижневик - [[http://golangweekly.com][http://golangweekly.com]]
- Slack-спільноти - [[https://blog.gopheracademy.com/gophers-slack-community/][Gophers]] та [[http://gophers.in.ua][GolangUA]]
- Браві хлопаки з Google та не тільки - [[https://dave.cheney.net][Dave Cheney]], [[https://twitter.com/enneff][Andrew Gerrand]],
[[https://twitter.com/rob_pike][Rob Pike]], [[https://twitter.com/bradfitz][Brad Fitzpatrick]] та інші

* Конференції

- [[https://www.facebook.com/events/1771847236475359/][GDG DevFest Ukraine 2017]] 13-14 Oct (Lviv)
- [[https://www.dotgo.eu][dotGo]] 6 Nov 2017 (Paris) [Promo: GOLANGUA - 20%]

.image ./0428-go-in-prod/logo-dotgo.png _ 600
